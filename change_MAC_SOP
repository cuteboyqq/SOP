
connect to WNC network by  wirednetwork
sudo ifconfig enp3s0 down
sudo ifconfig enp3s0 hw ether 58:6C:25:38:93:B1
sudo ifconfig enp3s0 up
======================================================
AMBA EVK Board
2023-10-12
Step 0 : connect AMBA EVK board to computer with wired lane
Step 1 : Open ternimal and type below command to change MAC address
 
	AMBA ip: 192.168.8.2
	RTX4080 ip : 192.168.50.76
	sudo ifconfig enp3s0 down
	sudo ifconfig enp3s0 192.168.8.10 netmask 255.255.255.0
	sudo ifconfig enp3s0 up
Step 2 :
	ping 192.168.8.2
	
Step 3 : install FileZilla
	sudo apt install filezilla
	
Step 4 : before upload model.bin, type command at dir [USER_DIR]/unit_test :
	cavalry_gen -V 2.2.8.3 -d ../../../out/onnx/demo_networks/onnx_yolov8n_det/out_onnx_yolov8n_det_parser/vas_output/ 
	-f ../../../out/onnx/demo_networks/onnx_yolov8n_det/cavalry_onnx_yolov8n_det/onnx_yolov8n_det_cavalry.bin 

Step 4.1 : Create folder in AMBA EVK board
	sdcard/yolov8
	sdcard/yolov8/model
	sdcard/yolov8/in
	sdcard/yolov8/labels
	sdcard/yolov8/out
	
	command: mkdir sdcards
		cd sdcard
		mkdir yolov8
		cd yolov8
		mkdir model
		mkdir in
		mkdir labels
		mkdir out
		
Step 5 : upload model.bin to sdcard/yolov8/model in 192.168.8.2 by Filezilla
	upload images into sdcard/yolov8/in
	upload labels.txt into sdcard/yolov8/labels

Step 5-1 :
	command on AMBA EVK board:
		 rmmod cavalry 
		 modprobe cavalry
		 cavalry_load -f /lib/firmware/cavalry.bin -r

Step 6 : Test File model on AMBA EVK board (below is YoloV5 model example)
	
 board # test_eazyai -m 1 -d 0 -n yolov5 \
        --model_path /sdcard/yolov5/model/onnx_yolov5s_cavalry.bin \
        --lua_file /usr/share/ambarella/eazyai/lua/yolov5s.lua \
        --isrc "i:images=/sdcard/yolov5/in|t:jpg|c:rgb" \
        --label_path /sdcard/yolov5/labels/coco_class_names.txt --class_num 80 \
        --output_dir /sdcard/yolov5/out/

Step 7 : Test infer time :
	command : 
	test_nnctrl -b /sdcard/yolov8/model/onnx_yolov8n_det_cavalry.bin -e -c --in images -t 10
======================================================
Raspberry pi 

sudo rfkill list all
rfkill unblock wifi 
========================================================
connect to network 

sudo apt-get install git


git clone http://172.16.201.32:1999/JNR330/argos2.3.0

git clone http://172.16.201.30:nctu/aismov

username:  21000701
password: Sb123456


=============================================================================
把image另外儲存成檔案
Docker除了可以將版本放在registry之外，也提供將整個image儲存到檔案的方式，下面指令可以快速地將image儲存到tar檔...

# docker save  couchdb12 > couchdb12.tar
實際檢測這個檔案的大小，大約260M左右... 還滿符合couchdb大小的 :D

# du -sh couchdb12.tar 
260M    couchdb12.tar
除了用導向的方式，該指令也支援--output跟-o的方式指定檔案

# docker save -o couchdb12.tar couchdb12
或是

# docker save --output couchdb12.tar couchdb12
或是指定檔案格式

# docker save couchdb12 | gzip > couchdb12.tgz
# docker export couchdb12 | gzip > couchdb12.tgz
從檔案回復Image
保存好檔案之後，可以透過import或load的方式將備份的檔案重新載入local的docker環境，讓不同的主機得以使用同一個未納管在版本庫中的Image檔案。

# docker load [tar file]
載入檔案指定

# gunzip -c mycontainer.tgz | docker load
或是使用docker import

# cat [tar file] | docker import - [image name]
如果import的部分是一個資料夾，可以用這樣的方式:

# cd [the folder need to import]
# sudo tar -c . | docker import - [image name]
而，docker import也支援使用http的url

sudo docker import http://example.com/exampleimage.tgz
參考資料
https://docs.docker.com/reference/commandline/cli/
